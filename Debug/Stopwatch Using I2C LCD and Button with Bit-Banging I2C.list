
Stopwatch Using I2C LCD and Button with Bit-Banging I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010d0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08001270  08001270  00002270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080012d0  080012d0  00003054  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080012d0  080012d0  000022d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080012d8  080012d8  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080012d8  080012d8  000022d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080012dc  080012dc  000022dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  080012e0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000054  08001334  00003054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08001334  000031c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001727  00000000  00000000  00003084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000066d  00000000  00000000  000047ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000248  00000000  00000000  00004e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000019e  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000153ee  00000000  00000000  000051fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002b22  00000000  00000000  0001a5ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089a9c  00000000  00000000  0001d10e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a6baa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c50  00000000  00000000  000a6bf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  000a7840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000054 	.word	0x20000054
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001258 	.word	0x08001258

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000058 	.word	0x20000058
 80001dc:	08001258 	.word	0x08001258

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <delay_us>:
void LCD_set_cursor(uint8_t row, uint8_t col);
void DisplayTime(uint8_t h, uint8_t m, uint8_t s);
void GPIO_init(void);

// ======= DELAY FUNCTIONS =======
void delay_us(uint32_t us) {
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
    SysTick->LOAD = 16 * us - 1;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	011b      	lsls	r3, r3, #4
 800028c:	4a0c      	ldr	r2, [pc, #48]	@ (80002c0 <delay_us+0x40>)
 800028e:	3b01      	subs	r3, #1
 8000290:	6053      	str	r3, [r2, #4]
    SysTick->VAL = 0;
 8000292:	4b0b      	ldr	r3, [pc, #44]	@ (80002c0 <delay_us+0x40>)
 8000294:	2200      	movs	r2, #0
 8000296:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = 5;
 8000298:	4b09      	ldr	r3, [pc, #36]	@ (80002c0 <delay_us+0x40>)
 800029a:	2205      	movs	r2, #5
 800029c:	601a      	str	r2, [r3, #0]
    while ((SysTick->CTRL & 0x10000) == 0);
 800029e:	bf00      	nop
 80002a0:	4b07      	ldr	r3, [pc, #28]	@ (80002c0 <delay_us+0x40>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d0f9      	beq.n	80002a0 <delay_us+0x20>
    SysTick->CTRL = 0;
 80002ac:	4b04      	ldr	r3, [pc, #16]	@ (80002c0 <delay_us+0x40>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]
}
 80002b2:	bf00      	nop
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	e000e010 	.word	0xe000e010

080002c4 <I2C_delay>:

void I2C_delay(void) {
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
    delay_us(2);
 80002c8:	2002      	movs	r0, #2
 80002ca:	f7ff ffd9 	bl	8000280 <delay_us>
}
 80002ce:	bf00      	nop
 80002d0:	bd80      	pop	{r7, pc}
	...

080002d4 <I2C_start>:

// ======= BIT-BANGING I2C =======
void I2C_start(void) {
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
    GPIOB->ODR |= (1 << SDA_PIN);
 80002d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000318 <I2C_start+0x44>)
 80002da:	695b      	ldr	r3, [r3, #20]
 80002dc:	4a0e      	ldr	r2, [pc, #56]	@ (8000318 <I2C_start+0x44>)
 80002de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80002e2:	6153      	str	r3, [r2, #20]
    GPIOB->ODR |= (1 << SCL_PIN);
 80002e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000318 <I2C_start+0x44>)
 80002e6:	695b      	ldr	r3, [r3, #20]
 80002e8:	4a0b      	ldr	r2, [pc, #44]	@ (8000318 <I2C_start+0x44>)
 80002ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002ee:	6153      	str	r3, [r2, #20]
    I2C_delay();
 80002f0:	f7ff ffe8 	bl	80002c4 <I2C_delay>
    GPIOB->ODR &= ~(1 << SDA_PIN);
 80002f4:	4b08      	ldr	r3, [pc, #32]	@ (8000318 <I2C_start+0x44>)
 80002f6:	695b      	ldr	r3, [r3, #20]
 80002f8:	4a07      	ldr	r2, [pc, #28]	@ (8000318 <I2C_start+0x44>)
 80002fa:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80002fe:	6153      	str	r3, [r2, #20]
    I2C_delay();
 8000300:	f7ff ffe0 	bl	80002c4 <I2C_delay>
    GPIOB->ODR &= ~(1 << SCL_PIN);
 8000304:	4b04      	ldr	r3, [pc, #16]	@ (8000318 <I2C_start+0x44>)
 8000306:	695b      	ldr	r3, [r3, #20]
 8000308:	4a03      	ldr	r2, [pc, #12]	@ (8000318 <I2C_start+0x44>)
 800030a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800030e:	6153      	str	r3, [r2, #20]
    I2C_delay();
 8000310:	f7ff ffd8 	bl	80002c4 <I2C_delay>
}
 8000314:	bf00      	nop
 8000316:	bd80      	pop	{r7, pc}
 8000318:	40020400 	.word	0x40020400

0800031c <I2C_stop>:

void I2C_stop(void) {
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
    GPIOB->ODR &= ~(1 << SDA_PIN);
 8000320:	4b0b      	ldr	r3, [pc, #44]	@ (8000350 <I2C_stop+0x34>)
 8000322:	695b      	ldr	r3, [r3, #20]
 8000324:	4a0a      	ldr	r2, [pc, #40]	@ (8000350 <I2C_stop+0x34>)
 8000326:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800032a:	6153      	str	r3, [r2, #20]
    GPIOB->ODR |= (1 << SCL_PIN);
 800032c:	4b08      	ldr	r3, [pc, #32]	@ (8000350 <I2C_stop+0x34>)
 800032e:	695b      	ldr	r3, [r3, #20]
 8000330:	4a07      	ldr	r2, [pc, #28]	@ (8000350 <I2C_stop+0x34>)
 8000332:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000336:	6153      	str	r3, [r2, #20]
    I2C_delay();
 8000338:	f7ff ffc4 	bl	80002c4 <I2C_delay>
    GPIOB->ODR |= (1 << SDA_PIN);
 800033c:	4b04      	ldr	r3, [pc, #16]	@ (8000350 <I2C_stop+0x34>)
 800033e:	695b      	ldr	r3, [r3, #20]
 8000340:	4a03      	ldr	r2, [pc, #12]	@ (8000350 <I2C_stop+0x34>)
 8000342:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000346:	6153      	str	r3, [r2, #20]
    I2C_delay();
 8000348:	f7ff ffbc 	bl	80002c4 <I2C_delay>
}
 800034c:	bf00      	nop
 800034e:	bd80      	pop	{r7, pc}
 8000350:	40020400 	.word	0x40020400

08000354 <I2C_write>:

void I2C_write(uint8_t data) {
 8000354:	b580      	push	{r7, lr}
 8000356:	b084      	sub	sp, #16
 8000358:	af00      	add	r7, sp, #0
 800035a:	4603      	mov	r3, r0
 800035c:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; i++) {
 800035e:	2300      	movs	r3, #0
 8000360:	60fb      	str	r3, [r7, #12]
 8000362:	e026      	b.n	80003b2 <I2C_write+0x5e>
        if (data & 0x80)
 8000364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000368:	2b00      	cmp	r3, #0
 800036a:	da06      	bge.n	800037a <I2C_write+0x26>
            GPIOB->ODR |= (1 << SDA_PIN);
 800036c:	4b1c      	ldr	r3, [pc, #112]	@ (80003e0 <I2C_write+0x8c>)
 800036e:	695b      	ldr	r3, [r3, #20]
 8000370:	4a1b      	ldr	r2, [pc, #108]	@ (80003e0 <I2C_write+0x8c>)
 8000372:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000376:	6153      	str	r3, [r2, #20]
 8000378:	e005      	b.n	8000386 <I2C_write+0x32>
        else
            GPIOB->ODR &= ~(1 << SDA_PIN);
 800037a:	4b19      	ldr	r3, [pc, #100]	@ (80003e0 <I2C_write+0x8c>)
 800037c:	695b      	ldr	r3, [r3, #20]
 800037e:	4a18      	ldr	r2, [pc, #96]	@ (80003e0 <I2C_write+0x8c>)
 8000380:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000384:	6153      	str	r3, [r2, #20]

        GPIOB->ODR |= (1 << SCL_PIN);
 8000386:	4b16      	ldr	r3, [pc, #88]	@ (80003e0 <I2C_write+0x8c>)
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	4a15      	ldr	r2, [pc, #84]	@ (80003e0 <I2C_write+0x8c>)
 800038c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000390:	6153      	str	r3, [r2, #20]
        I2C_delay();
 8000392:	f7ff ff97 	bl	80002c4 <I2C_delay>
        GPIOB->ODR &= ~(1 << SCL_PIN);
 8000396:	4b12      	ldr	r3, [pc, #72]	@ (80003e0 <I2C_write+0x8c>)
 8000398:	695b      	ldr	r3, [r3, #20]
 800039a:	4a11      	ldr	r2, [pc, #68]	@ (80003e0 <I2C_write+0x8c>)
 800039c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80003a0:	6153      	str	r3, [r2, #20]
        I2C_delay();
 80003a2:	f7ff ff8f 	bl	80002c4 <I2C_delay>

        data <<= 1;
 80003a6:	79fb      	ldrb	r3, [r7, #7]
 80003a8:	005b      	lsls	r3, r3, #1
 80003aa:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; i++) {
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	3301      	adds	r3, #1
 80003b0:	60fb      	str	r3, [r7, #12]
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	2b07      	cmp	r3, #7
 80003b6:	ddd5      	ble.n	8000364 <I2C_write+0x10>
    }

    // ACK clock
    GPIOB->ODR |= (1 << SCL_PIN);
 80003b8:	4b09      	ldr	r3, [pc, #36]	@ (80003e0 <I2C_write+0x8c>)
 80003ba:	695b      	ldr	r3, [r3, #20]
 80003bc:	4a08      	ldr	r2, [pc, #32]	@ (80003e0 <I2C_write+0x8c>)
 80003be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003c2:	6153      	str	r3, [r2, #20]
    I2C_delay();
 80003c4:	f7ff ff7e 	bl	80002c4 <I2C_delay>
    GPIOB->ODR &= ~(1 << SCL_PIN);
 80003c8:	4b05      	ldr	r3, [pc, #20]	@ (80003e0 <I2C_write+0x8c>)
 80003ca:	695b      	ldr	r3, [r3, #20]
 80003cc:	4a04      	ldr	r2, [pc, #16]	@ (80003e0 <I2C_write+0x8c>)
 80003ce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80003d2:	6153      	str	r3, [r2, #20]
    I2C_delay();
 80003d4:	f7ff ff76 	bl	80002c4 <I2C_delay>
}
 80003d8:	bf00      	nop
 80003da:	3710      	adds	r7, #16
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	40020400 	.word	0x40020400

080003e4 <LCD_send_cmd>:

// ======= LCD FUNCTIONS =======
void LCD_send_cmd(uint8_t cmd) {
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b084      	sub	sp, #16
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	4603      	mov	r3, r0
 80003ec:	71fb      	strb	r3, [r7, #7]
    uint8_t high = cmd & 0xF0;
 80003ee:	79fb      	ldrb	r3, [r7, #7]
 80003f0:	f023 030f 	bic.w	r3, r3, #15
 80003f4:	73fb      	strb	r3, [r7, #15]
    uint8_t low = (cmd << 4) & 0xF0;
 80003f6:	79fb      	ldrb	r3, [r7, #7]
 80003f8:	011b      	lsls	r3, r3, #4
 80003fa:	73bb      	strb	r3, [r7, #14]
    uint8_t data;

    I2C_start();
 80003fc:	f7ff ff6a 	bl	80002d4 <I2C_start>
    I2C_write(LCD_ADDR);
 8000400:	204e      	movs	r0, #78	@ 0x4e
 8000402:	f7ff ffa7 	bl	8000354 <I2C_write>

    data = high | 0x08;
 8000406:	7bfb      	ldrb	r3, [r7, #15]
 8000408:	f043 0308 	orr.w	r3, r3, #8
 800040c:	737b      	strb	r3, [r7, #13]
    I2C_write(data);
 800040e:	7b7b      	ldrb	r3, [r7, #13]
 8000410:	4618      	mov	r0, r3
 8000412:	f7ff ff9f 	bl	8000354 <I2C_write>
    I2C_write(data | 0x04);
 8000416:	7b7b      	ldrb	r3, [r7, #13]
 8000418:	f043 0304 	orr.w	r3, r3, #4
 800041c:	b2db      	uxtb	r3, r3
 800041e:	4618      	mov	r0, r3
 8000420:	f7ff ff98 	bl	8000354 <I2C_write>
    I2C_write(data);
 8000424:	7b7b      	ldrb	r3, [r7, #13]
 8000426:	4618      	mov	r0, r3
 8000428:	f7ff ff94 	bl	8000354 <I2C_write>

    data = low | 0x08;
 800042c:	7bbb      	ldrb	r3, [r7, #14]
 800042e:	f043 0308 	orr.w	r3, r3, #8
 8000432:	737b      	strb	r3, [r7, #13]
    I2C_write(data);
 8000434:	7b7b      	ldrb	r3, [r7, #13]
 8000436:	4618      	mov	r0, r3
 8000438:	f7ff ff8c 	bl	8000354 <I2C_write>
    I2C_write(data | 0x04);
 800043c:	7b7b      	ldrb	r3, [r7, #13]
 800043e:	f043 0304 	orr.w	r3, r3, #4
 8000442:	b2db      	uxtb	r3, r3
 8000444:	4618      	mov	r0, r3
 8000446:	f7ff ff85 	bl	8000354 <I2C_write>
    I2C_write(data);
 800044a:	7b7b      	ldrb	r3, [r7, #13]
 800044c:	4618      	mov	r0, r3
 800044e:	f7ff ff81 	bl	8000354 <I2C_write>

    I2C_stop();
 8000452:	f7ff ff63 	bl	800031c <I2C_stop>
    delay_us(50);
 8000456:	2032      	movs	r0, #50	@ 0x32
 8000458:	f7ff ff12 	bl	8000280 <delay_us>
}
 800045c:	bf00      	nop
 800045e:	3710      	adds	r7, #16
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}

08000464 <LCD_send_data>:

void LCD_send_data(uint8_t dataByte) {
 8000464:	b580      	push	{r7, lr}
 8000466:	b084      	sub	sp, #16
 8000468:	af00      	add	r7, sp, #0
 800046a:	4603      	mov	r3, r0
 800046c:	71fb      	strb	r3, [r7, #7]
    uint8_t high = dataByte & 0xF0;
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	f023 030f 	bic.w	r3, r3, #15
 8000474:	73fb      	strb	r3, [r7, #15]
    uint8_t low = (dataByte << 4) & 0xF0;
 8000476:	79fb      	ldrb	r3, [r7, #7]
 8000478:	011b      	lsls	r3, r3, #4
 800047a:	73bb      	strb	r3, [r7, #14]
    uint8_t data;

    I2C_start();
 800047c:	f7ff ff2a 	bl	80002d4 <I2C_start>
    I2C_write(LCD_ADDR);
 8000480:	204e      	movs	r0, #78	@ 0x4e
 8000482:	f7ff ff67 	bl	8000354 <I2C_write>

    data = high | 0x09;
 8000486:	7bfb      	ldrb	r3, [r7, #15]
 8000488:	f043 0309 	orr.w	r3, r3, #9
 800048c:	737b      	strb	r3, [r7, #13]
    I2C_write(data);
 800048e:	7b7b      	ldrb	r3, [r7, #13]
 8000490:	4618      	mov	r0, r3
 8000492:	f7ff ff5f 	bl	8000354 <I2C_write>
    I2C_write(data | 0x04);
 8000496:	7b7b      	ldrb	r3, [r7, #13]
 8000498:	f043 0304 	orr.w	r3, r3, #4
 800049c:	b2db      	uxtb	r3, r3
 800049e:	4618      	mov	r0, r3
 80004a0:	f7ff ff58 	bl	8000354 <I2C_write>
    I2C_write(data);
 80004a4:	7b7b      	ldrb	r3, [r7, #13]
 80004a6:	4618      	mov	r0, r3
 80004a8:	f7ff ff54 	bl	8000354 <I2C_write>

    data = low | 0x09;
 80004ac:	7bbb      	ldrb	r3, [r7, #14]
 80004ae:	f043 0309 	orr.w	r3, r3, #9
 80004b2:	737b      	strb	r3, [r7, #13]
    I2C_write(data);
 80004b4:	7b7b      	ldrb	r3, [r7, #13]
 80004b6:	4618      	mov	r0, r3
 80004b8:	f7ff ff4c 	bl	8000354 <I2C_write>
    I2C_write(data | 0x04);
 80004bc:	7b7b      	ldrb	r3, [r7, #13]
 80004be:	f043 0304 	orr.w	r3, r3, #4
 80004c2:	b2db      	uxtb	r3, r3
 80004c4:	4618      	mov	r0, r3
 80004c6:	f7ff ff45 	bl	8000354 <I2C_write>
    I2C_write(data);
 80004ca:	7b7b      	ldrb	r3, [r7, #13]
 80004cc:	4618      	mov	r0, r3
 80004ce:	f7ff ff41 	bl	8000354 <I2C_write>

    I2C_stop();
 80004d2:	f7ff ff23 	bl	800031c <I2C_stop>
    delay_us(50);
 80004d6:	2032      	movs	r0, #50	@ 0x32
 80004d8:	f7ff fed2 	bl	8000280 <delay_us>
}
 80004dc:	bf00      	nop
 80004de:	3710      	adds	r7, #16
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}

080004e4 <LCD_send_string>:

void LCD_send_string(char *str) {
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
    while (*str) {
 80004ec:	e006      	b.n	80004fc <LCD_send_string+0x18>
        LCD_send_data(*str++);
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	1c5a      	adds	r2, r3, #1
 80004f2:	607a      	str	r2, [r7, #4]
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	4618      	mov	r0, r3
 80004f8:	f7ff ffb4 	bl	8000464 <LCD_send_data>
    while (*str) {
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d1f4      	bne.n	80004ee <LCD_send_string+0xa>
    }
}
 8000504:	bf00      	nop
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}

0800050e <LCD_set_cursor>:

void LCD_set_cursor(uint8_t row, uint8_t col) {
 800050e:	b580      	push	{r7, lr}
 8000510:	b084      	sub	sp, #16
 8000512:	af00      	add	r7, sp, #0
 8000514:	4603      	mov	r3, r0
 8000516:	460a      	mov	r2, r1
 8000518:	71fb      	strb	r3, [r7, #7]
 800051a:	4613      	mov	r3, r2
 800051c:	71bb      	strb	r3, [r7, #6]
    uint8_t addr = (row == 0) ? 0x80 + col : 0xC0 + col;
 800051e:	79fb      	ldrb	r3, [r7, #7]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d103      	bne.n	800052c <LCD_set_cursor+0x1e>
 8000524:	79bb      	ldrb	r3, [r7, #6]
 8000526:	3b80      	subs	r3, #128	@ 0x80
 8000528:	b2db      	uxtb	r3, r3
 800052a:	e002      	b.n	8000532 <LCD_set_cursor+0x24>
 800052c:	79bb      	ldrb	r3, [r7, #6]
 800052e:	3b40      	subs	r3, #64	@ 0x40
 8000530:	b2db      	uxtb	r3, r3
 8000532:	73fb      	strb	r3, [r7, #15]
    LCD_send_cmd(addr);
 8000534:	7bfb      	ldrb	r3, [r7, #15]
 8000536:	4618      	mov	r0, r3
 8000538:	f7ff ff54 	bl	80003e4 <LCD_send_cmd>
}
 800053c:	bf00      	nop
 800053e:	3710      	adds	r7, #16
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}

08000544 <LCD_init>:

void LCD_init(void) {
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
    delay_us(50000);
 8000548:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800054c:	f7ff fe98 	bl	8000280 <delay_us>
    LCD_send_cmd(0x30); delay_us(5000);
 8000550:	2030      	movs	r0, #48	@ 0x30
 8000552:	f7ff ff47 	bl	80003e4 <LCD_send_cmd>
 8000556:	f241 3088 	movw	r0, #5000	@ 0x1388
 800055a:	f7ff fe91 	bl	8000280 <delay_us>
    LCD_send_cmd(0x30); delay_us(1000);
 800055e:	2030      	movs	r0, #48	@ 0x30
 8000560:	f7ff ff40 	bl	80003e4 <LCD_send_cmd>
 8000564:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000568:	f7ff fe8a 	bl	8000280 <delay_us>
    LCD_send_cmd(0x30); delay_us(1000);
 800056c:	2030      	movs	r0, #48	@ 0x30
 800056e:	f7ff ff39 	bl	80003e4 <LCD_send_cmd>
 8000572:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000576:	f7ff fe83 	bl	8000280 <delay_us>
    LCD_send_cmd(0x20); // 4-bit mode
 800057a:	2020      	movs	r0, #32
 800057c:	f7ff ff32 	bl	80003e4 <LCD_send_cmd>
    LCD_send_cmd(0x28); // 2 lines
 8000580:	2028      	movs	r0, #40	@ 0x28
 8000582:	f7ff ff2f 	bl	80003e4 <LCD_send_cmd>
    LCD_send_cmd(0x0C); // Display ON, Cursor OFF
 8000586:	200c      	movs	r0, #12
 8000588:	f7ff ff2c 	bl	80003e4 <LCD_send_cmd>
    LCD_send_cmd(0x06); // Entry mode
 800058c:	2006      	movs	r0, #6
 800058e:	f7ff ff29 	bl	80003e4 <LCD_send_cmd>
    LCD_send_cmd(0x01); // Clear
 8000592:	2001      	movs	r0, #1
 8000594:	f7ff ff26 	bl	80003e4 <LCD_send_cmd>
    delay_us(2000);
 8000598:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800059c:	f7ff fe70 	bl	8000280 <delay_us>
}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <DisplayTime>:

// ======= DISPLAY TIME =======
void DisplayTime(uint8_t h, uint8_t m, uint8_t s) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08a      	sub	sp, #40	@ 0x28
 80005a8:	af02      	add	r7, sp, #8
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
 80005ae:	460b      	mov	r3, r1
 80005b0:	71bb      	strb	r3, [r7, #6]
 80005b2:	4613      	mov	r3, r2
 80005b4:	717b      	strb	r3, [r7, #5]
    char buf[17];
    sprintf(buf, "%02d:%02d:%02d", h, m, s);
 80005b6:	79fa      	ldrb	r2, [r7, #7]
 80005b8:	79b9      	ldrb	r1, [r7, #6]
 80005ba:	797b      	ldrb	r3, [r7, #5]
 80005bc:	f107 000c 	add.w	r0, r7, #12
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	460b      	mov	r3, r1
 80005c4:	4907      	ldr	r1, [pc, #28]	@ (80005e4 <DisplayTime+0x40>)
 80005c6:	f000 f9af 	bl	8000928 <siprintf>
    LCD_set_cursor(1, 0);
 80005ca:	2100      	movs	r1, #0
 80005cc:	2001      	movs	r0, #1
 80005ce:	f7ff ff9e 	bl	800050e <LCD_set_cursor>
    LCD_send_string(buf);
 80005d2:	f107 030c 	add.w	r3, r7, #12
 80005d6:	4618      	mov	r0, r3
 80005d8:	f7ff ff84 	bl	80004e4 <LCD_send_string>
}
 80005dc:	bf00      	nop
 80005de:	3720      	adds	r7, #32
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	08001270 	.word	0x08001270

080005e8 <GPIO_init>:

// ======= GPIO INIT =======
void GPIO_init(void) {
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80005ec:	4b20      	ldr	r3, [pc, #128]	@ (8000670 <GPIO_init+0x88>)
 80005ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f0:	4a1f      	ldr	r2, [pc, #124]	@ (8000670 <GPIO_init+0x88>)
 80005f2:	f043 0302 	orr.w	r3, r3, #2
 80005f6:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80005f8:	4b1d      	ldr	r3, [pc, #116]	@ (8000670 <GPIO_init+0x88>)
 80005fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fc:	4a1c      	ldr	r2, [pc, #112]	@ (8000670 <GPIO_init+0x88>)
 80005fe:	f043 0301 	orr.w	r3, r3, #1
 8000602:	6313      	str	r3, [r2, #48]	@ 0x30

    // PB8 & PB9 as open-drain output
    GPIOB->MODER &= ~(0xF << (2 * SCL_PIN));
 8000604:	4b1b      	ldr	r3, [pc, #108]	@ (8000674 <GPIO_init+0x8c>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a1a      	ldr	r2, [pc, #104]	@ (8000674 <GPIO_init+0x8c>)
 800060a:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 800060e:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (0x5 << (2 * SCL_PIN));
 8000610:	4b18      	ldr	r3, [pc, #96]	@ (8000674 <GPIO_init+0x8c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a17      	ldr	r2, [pc, #92]	@ (8000674 <GPIO_init+0x8c>)
 8000616:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 800061a:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER |= (1 << SCL_PIN) | (1 << SDA_PIN);
 800061c:	4b15      	ldr	r3, [pc, #84]	@ (8000674 <GPIO_init+0x8c>)
 800061e:	685b      	ldr	r3, [r3, #4]
 8000620:	4a14      	ldr	r2, [pc, #80]	@ (8000674 <GPIO_init+0x8c>)
 8000622:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000626:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= (0xF << (2 * SCL_PIN));
 8000628:	4b12      	ldr	r3, [pc, #72]	@ (8000674 <GPIO_init+0x8c>)
 800062a:	689b      	ldr	r3, [r3, #8]
 800062c:	4a11      	ldr	r2, [pc, #68]	@ (8000674 <GPIO_init+0x8c>)
 800062e:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 8000632:	6093      	str	r3, [r2, #8]
    GPIOB->PUPDR &= ~(0xF << (2 * SCL_PIN));
 8000634:	4b0f      	ldr	r3, [pc, #60]	@ (8000674 <GPIO_init+0x8c>)
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	4a0e      	ldr	r2, [pc, #56]	@ (8000674 <GPIO_init+0x8c>)
 800063a:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 800063e:	60d3      	str	r3, [r2, #12]

    // PA5 & PA6 as input with pull-up
    GPIOA->MODER &= ~(0xF << (2 * START_STOP_PIN));
 8000640:	4b0d      	ldr	r3, [pc, #52]	@ (8000678 <GPIO_init+0x90>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a0c      	ldr	r2, [pc, #48]	@ (8000678 <GPIO_init+0x90>)
 8000646:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 800064a:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(0xF << (2 * START_STOP_PIN));
 800064c:	4b0a      	ldr	r3, [pc, #40]	@ (8000678 <GPIO_init+0x90>)
 800064e:	68db      	ldr	r3, [r3, #12]
 8000650:	4a09      	ldr	r2, [pc, #36]	@ (8000678 <GPIO_init+0x90>)
 8000652:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8000656:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |=  (0x5 << (2 * START_STOP_PIN));
 8000658:	4b07      	ldr	r3, [pc, #28]	@ (8000678 <GPIO_init+0x90>)
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	4a06      	ldr	r2, [pc, #24]	@ (8000678 <GPIO_init+0x90>)
 800065e:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8000662:	60d3      	str	r3, [r2, #12]
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	40023800 	.word	0x40023800
 8000674:	40020400 	.word	0x40020400
 8000678:	40020000 	.word	0x40020000

0800067c <main>:

// ======= MAIN FUNCTION =======
int main(void) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
    SystemInit();
 8000682:	f000 f901 	bl	8000888 <SystemInit>
    GPIO_init();
 8000686:	f7ff ffaf 	bl	80005e8 <GPIO_init>
    LCD_init();
 800068a:	f7ff ff5b 	bl	8000544 <LCD_init>

    LCD_set_cursor(0, 0);
 800068e:	2100      	movs	r1, #0
 8000690:	2000      	movs	r0, #0
 8000692:	f7ff ff3c 	bl	800050e <LCD_set_cursor>
    LCD_send_string("STOPWATCH");
 8000696:	4840      	ldr	r0, [pc, #256]	@ (8000798 <main+0x11c>)
 8000698:	f7ff ff24 	bl	80004e4 <LCD_send_string>

    uint8_t running = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	71fb      	strb	r3, [r7, #7]
    uint8_t hrs = 0, min = 0, sec = 0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	71bb      	strb	r3, [r7, #6]
 80006a4:	2300      	movs	r3, #0
 80006a6:	717b      	strb	r3, [r7, #5]
 80006a8:	2300      	movs	r3, #0
 80006aa:	713b      	strb	r3, [r7, #4]
    uint8_t last_state_pa5 = 1, last_state_pa6 = 1;
 80006ac:	2301      	movs	r3, #1
 80006ae:	70fb      	strb	r3, [r7, #3]
 80006b0:	2301      	movs	r3, #1
 80006b2:	70bb      	strb	r3, [r7, #2]

    while (1) {
        uint8_t curr_pa5 = (GPIOA->IDR & (1 << START_STOP_PIN)) ? 1 : 0;
 80006b4:	4b39      	ldr	r3, [pc, #228]	@ (800079c <main+0x120>)
 80006b6:	691b      	ldr	r3, [r3, #16]
 80006b8:	f003 0320 	and.w	r3, r3, #32
 80006bc:	2b00      	cmp	r3, #0
 80006be:	bf14      	ite	ne
 80006c0:	2301      	movne	r3, #1
 80006c2:	2300      	moveq	r3, #0
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	707b      	strb	r3, [r7, #1]
        uint8_t curr_pa6 = (GPIOA->IDR & (1 << RESET_PIN)) ? 1 : 0;
 80006c8:	4b34      	ldr	r3, [pc, #208]	@ (800079c <main+0x120>)
 80006ca:	691b      	ldr	r3, [r3, #16]
 80006cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	bf14      	ite	ne
 80006d4:	2301      	movne	r3, #1
 80006d6:	2300      	moveq	r3, #0
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	703b      	strb	r3, [r7, #0]

        // Start/Stop Toggle
        if (!curr_pa5 && last_state_pa5) {
 80006dc:	787b      	ldrb	r3, [r7, #1]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d119      	bne.n	8000716 <main+0x9a>
 80006e2:	78fb      	ldrb	r3, [r7, #3]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d016      	beq.n	8000716 <main+0x9a>
            running = !running;
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	bf0c      	ite	eq
 80006ee:	2301      	moveq	r3, #1
 80006f0:	2300      	movne	r3, #0
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	71fb      	strb	r3, [r7, #7]
            LCD_set_cursor(1, 9);
 80006f6:	2109      	movs	r1, #9
 80006f8:	2001      	movs	r0, #1
 80006fa:	f7ff ff08 	bl	800050e <LCD_set_cursor>
            LCD_send_string(running ? "RUNNING" : "PAUSED ");
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <main+0x8c>
 8000704:	4b26      	ldr	r3, [pc, #152]	@ (80007a0 <main+0x124>)
 8000706:	e000      	b.n	800070a <main+0x8e>
 8000708:	4b26      	ldr	r3, [pc, #152]	@ (80007a4 <main+0x128>)
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff feea 	bl	80004e4 <LCD_send_string>
            delay_us(200000);  // debounce
 8000710:	4825      	ldr	r0, [pc, #148]	@ (80007a8 <main+0x12c>)
 8000712:	f7ff fdb5 	bl	8000280 <delay_us>
        }
        last_state_pa5 = curr_pa5;
 8000716:	787b      	ldrb	r3, [r7, #1]
 8000718:	70fb      	strb	r3, [r7, #3]

        // Reset Button
        if (!curr_pa6 && last_state_pa6) {
 800071a:	783b      	ldrb	r3, [r7, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d118      	bne.n	8000752 <main+0xd6>
 8000720:	78bb      	ldrb	r3, [r7, #2]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d015      	beq.n	8000752 <main+0xd6>
            hrs = min = sec = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	713b      	strb	r3, [r7, #4]
 800072a:	793b      	ldrb	r3, [r7, #4]
 800072c:	717b      	strb	r3, [r7, #5]
 800072e:	797b      	ldrb	r3, [r7, #5]
 8000730:	71bb      	strb	r3, [r7, #6]
            DisplayTime(hrs, min, sec);
 8000732:	793a      	ldrb	r2, [r7, #4]
 8000734:	7979      	ldrb	r1, [r7, #5]
 8000736:	79bb      	ldrb	r3, [r7, #6]
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff ff33 	bl	80005a4 <DisplayTime>
            LCD_set_cursor(1, 9);
 800073e:	2109      	movs	r1, #9
 8000740:	2001      	movs	r0, #1
 8000742:	f7ff fee4 	bl	800050e <LCD_set_cursor>
            LCD_send_string("PAUSED ");
 8000746:	4817      	ldr	r0, [pc, #92]	@ (80007a4 <main+0x128>)
 8000748:	f7ff fecc 	bl	80004e4 <LCD_send_string>
            delay_us(200000);  // debounce
 800074c:	4816      	ldr	r0, [pc, #88]	@ (80007a8 <main+0x12c>)
 800074e:	f7ff fd97 	bl	8000280 <delay_us>
        }
        last_state_pa6 = curr_pa6;
 8000752:	783b      	ldrb	r3, [r7, #0]
 8000754:	70bb      	strb	r3, [r7, #2]

        // Time Counting
        if (running) {
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d0ab      	beq.n	80006b4 <main+0x38>
            delay_us(1000000);
 800075c:	4813      	ldr	r0, [pc, #76]	@ (80007ac <main+0x130>)
 800075e:	f7ff fd8f 	bl	8000280 <delay_us>
            sec++;
 8000762:	793b      	ldrb	r3, [r7, #4]
 8000764:	3301      	adds	r3, #1
 8000766:	713b      	strb	r3, [r7, #4]
            if (sec == 60) {
 8000768:	793b      	ldrb	r3, [r7, #4]
 800076a:	2b3c      	cmp	r3, #60	@ 0x3c
 800076c:	d10c      	bne.n	8000788 <main+0x10c>
                sec = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	713b      	strb	r3, [r7, #4]
                min++;
 8000772:	797b      	ldrb	r3, [r7, #5]
 8000774:	3301      	adds	r3, #1
 8000776:	717b      	strb	r3, [r7, #5]
                if (min == 60) {
 8000778:	797b      	ldrb	r3, [r7, #5]
 800077a:	2b3c      	cmp	r3, #60	@ 0x3c
 800077c:	d104      	bne.n	8000788 <main+0x10c>
                    min = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	717b      	strb	r3, [r7, #5]
                    hrs++;
 8000782:	79bb      	ldrb	r3, [r7, #6]
 8000784:	3301      	adds	r3, #1
 8000786:	71bb      	strb	r3, [r7, #6]
                }
            }
            DisplayTime(hrs, min, sec);
 8000788:	793a      	ldrb	r2, [r7, #4]
 800078a:	7979      	ldrb	r1, [r7, #5]
 800078c:	79bb      	ldrb	r3, [r7, #6]
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff ff08 	bl	80005a4 <DisplayTime>
    while (1) {
 8000794:	e78e      	b.n	80006b4 <main+0x38>
 8000796:	bf00      	nop
 8000798:	08001280 	.word	0x08001280
 800079c:	40020000 	.word	0x40020000
 80007a0:	0800128c 	.word	0x0800128c
 80007a4:	08001294 	.word	0x08001294
 80007a8:	00030d40 	.word	0x00030d40
 80007ac:	000f4240 	.word	0x000f4240

080007b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007b4:	bf00      	nop
 80007b6:	e7fd      	b.n	80007b4 <NMI_Handler+0x4>

080007b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007bc:	bf00      	nop
 80007be:	e7fd      	b.n	80007bc <HardFault_Handler+0x4>

080007c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c4:	bf00      	nop
 80007c6:	e7fd      	b.n	80007c4 <MemManage_Handler+0x4>

080007c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <BusFault_Handler+0x4>

080007d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d4:	bf00      	nop
 80007d6:	e7fd      	b.n	80007d4 <UsageFault_Handler+0x4>

080007d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr

080007e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr

08000802 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000806:	f000 f87b 	bl	8000900 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}

0800080e <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr

0800081c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000824:	4a14      	ldr	r2, [pc, #80]	@ (8000878 <_sbrk+0x5c>)
 8000826:	4b15      	ldr	r3, [pc, #84]	@ (800087c <_sbrk+0x60>)
 8000828:	1ad3      	subs	r3, r2, r3
 800082a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000830:	4b13      	ldr	r3, [pc, #76]	@ (8000880 <_sbrk+0x64>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d102      	bne.n	800083e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000838:	4b11      	ldr	r3, [pc, #68]	@ (8000880 <_sbrk+0x64>)
 800083a:	4a12      	ldr	r2, [pc, #72]	@ (8000884 <_sbrk+0x68>)
 800083c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800083e:	4b10      	ldr	r3, [pc, #64]	@ (8000880 <_sbrk+0x64>)
 8000840:	681a      	ldr	r2, [r3, #0]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4413      	add	r3, r2
 8000846:	693a      	ldr	r2, [r7, #16]
 8000848:	429a      	cmp	r2, r3
 800084a:	d207      	bcs.n	800085c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800084c:	f000 f88e 	bl	800096c <__errno>
 8000850:	4603      	mov	r3, r0
 8000852:	220c      	movs	r2, #12
 8000854:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000856:	f04f 33ff 	mov.w	r3, #4294967295
 800085a:	e009      	b.n	8000870 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800085c:	4b08      	ldr	r3, [pc, #32]	@ (8000880 <_sbrk+0x64>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000862:	4b07      	ldr	r3, [pc, #28]	@ (8000880 <_sbrk+0x64>)
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4413      	add	r3, r2
 800086a:	4a05      	ldr	r2, [pc, #20]	@ (8000880 <_sbrk+0x64>)
 800086c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800086e:	68fb      	ldr	r3, [r7, #12]
}
 8000870:	4618      	mov	r0, r3
 8000872:	3718      	adds	r7, #24
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20020000 	.word	0x20020000
 800087c:	00000400 	.word	0x00000400
 8000880:	20000070 	.word	0x20000070
 8000884:	200001c0 	.word	0x200001c0

08000888 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800088c:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <SystemInit+0x20>)
 800088e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000892:	4a05      	ldr	r2, [pc, #20]	@ (80008a8 <SystemInit+0x20>)
 8000894:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000898:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	e000ed00 	.word	0xe000ed00

080008ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80008ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008b0:	f7ff ffea 	bl	8000888 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008b4:	480c      	ldr	r0, [pc, #48]	@ (80008e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008b6:	490d      	ldr	r1, [pc, #52]	@ (80008ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008b8:	4a0d      	ldr	r2, [pc, #52]	@ (80008f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008bc:	e002      	b.n	80008c4 <LoopCopyDataInit>

080008be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008c2:	3304      	adds	r3, #4

080008c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c8:	d3f9      	bcc.n	80008be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ca:	4a0a      	ldr	r2, [pc, #40]	@ (80008f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008cc:	4c0a      	ldr	r4, [pc, #40]	@ (80008f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d0:	e001      	b.n	80008d6 <LoopFillZerobss>

080008d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d4:	3204      	adds	r2, #4

080008d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d8:	d3fb      	bcc.n	80008d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008da:	f000 f84d 	bl	8000978 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008de:	f7ff fecd 	bl	800067c <main>
  bx  lr    
 80008e2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80008e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008ec:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 80008f0:	080012e0 	.word	0x080012e0
  ldr r2, =_sbss
 80008f4:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 80008f8:	200001c0 	.word	0x200001c0

080008fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008fc:	e7fe      	b.n	80008fc <ADC_IRQHandler>
	...

08000900 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000904:	4b06      	ldr	r3, [pc, #24]	@ (8000920 <HAL_IncTick+0x20>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	461a      	mov	r2, r3
 800090a:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <HAL_IncTick+0x24>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4413      	add	r3, r2
 8000910:	4a04      	ldr	r2, [pc, #16]	@ (8000924 <HAL_IncTick+0x24>)
 8000912:	6013      	str	r3, [r2, #0]
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	20000000 	.word	0x20000000
 8000924:	20000074 	.word	0x20000074

08000928 <siprintf>:
 8000928:	b40e      	push	{r1, r2, r3}
 800092a:	b510      	push	{r4, lr}
 800092c:	b09d      	sub	sp, #116	@ 0x74
 800092e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8000930:	9002      	str	r0, [sp, #8]
 8000932:	9006      	str	r0, [sp, #24]
 8000934:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000938:	480a      	ldr	r0, [pc, #40]	@ (8000964 <siprintf+0x3c>)
 800093a:	9107      	str	r1, [sp, #28]
 800093c:	9104      	str	r1, [sp, #16]
 800093e:	490a      	ldr	r1, [pc, #40]	@ (8000968 <siprintf+0x40>)
 8000940:	f853 2b04 	ldr.w	r2, [r3], #4
 8000944:	9105      	str	r1, [sp, #20]
 8000946:	2400      	movs	r4, #0
 8000948:	a902      	add	r1, sp, #8
 800094a:	6800      	ldr	r0, [r0, #0]
 800094c:	9301      	str	r3, [sp, #4]
 800094e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8000950:	f000 f98c 	bl	8000c6c <_svfiprintf_r>
 8000954:	9b02      	ldr	r3, [sp, #8]
 8000956:	701c      	strb	r4, [r3, #0]
 8000958:	b01d      	add	sp, #116	@ 0x74
 800095a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800095e:	b003      	add	sp, #12
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	20000004 	.word	0x20000004
 8000968:	ffff0208 	.word	0xffff0208

0800096c <__errno>:
 800096c:	4b01      	ldr	r3, [pc, #4]	@ (8000974 <__errno+0x8>)
 800096e:	6818      	ldr	r0, [r3, #0]
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	20000004 	.word	0x20000004

08000978 <__libc_init_array>:
 8000978:	b570      	push	{r4, r5, r6, lr}
 800097a:	4d0d      	ldr	r5, [pc, #52]	@ (80009b0 <__libc_init_array+0x38>)
 800097c:	4c0d      	ldr	r4, [pc, #52]	@ (80009b4 <__libc_init_array+0x3c>)
 800097e:	1b64      	subs	r4, r4, r5
 8000980:	10a4      	asrs	r4, r4, #2
 8000982:	2600      	movs	r6, #0
 8000984:	42a6      	cmp	r6, r4
 8000986:	d109      	bne.n	800099c <__libc_init_array+0x24>
 8000988:	4d0b      	ldr	r5, [pc, #44]	@ (80009b8 <__libc_init_array+0x40>)
 800098a:	4c0c      	ldr	r4, [pc, #48]	@ (80009bc <__libc_init_array+0x44>)
 800098c:	f000 fc64 	bl	8001258 <_init>
 8000990:	1b64      	subs	r4, r4, r5
 8000992:	10a4      	asrs	r4, r4, #2
 8000994:	2600      	movs	r6, #0
 8000996:	42a6      	cmp	r6, r4
 8000998:	d105      	bne.n	80009a6 <__libc_init_array+0x2e>
 800099a:	bd70      	pop	{r4, r5, r6, pc}
 800099c:	f855 3b04 	ldr.w	r3, [r5], #4
 80009a0:	4798      	blx	r3
 80009a2:	3601      	adds	r6, #1
 80009a4:	e7ee      	b.n	8000984 <__libc_init_array+0xc>
 80009a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80009aa:	4798      	blx	r3
 80009ac:	3601      	adds	r6, #1
 80009ae:	e7f2      	b.n	8000996 <__libc_init_array+0x1e>
 80009b0:	080012d8 	.word	0x080012d8
 80009b4:	080012d8 	.word	0x080012d8
 80009b8:	080012d8 	.word	0x080012d8
 80009bc:	080012dc 	.word	0x080012dc

080009c0 <__retarget_lock_acquire_recursive>:
 80009c0:	4770      	bx	lr

080009c2 <__retarget_lock_release_recursive>:
 80009c2:	4770      	bx	lr

080009c4 <_free_r>:
 80009c4:	b538      	push	{r3, r4, r5, lr}
 80009c6:	4605      	mov	r5, r0
 80009c8:	2900      	cmp	r1, #0
 80009ca:	d041      	beq.n	8000a50 <_free_r+0x8c>
 80009cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80009d0:	1f0c      	subs	r4, r1, #4
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	bfb8      	it	lt
 80009d6:	18e4      	addlt	r4, r4, r3
 80009d8:	f000 f8e0 	bl	8000b9c <__malloc_lock>
 80009dc:	4a1d      	ldr	r2, [pc, #116]	@ (8000a54 <_free_r+0x90>)
 80009de:	6813      	ldr	r3, [r2, #0]
 80009e0:	b933      	cbnz	r3, 80009f0 <_free_r+0x2c>
 80009e2:	6063      	str	r3, [r4, #4]
 80009e4:	6014      	str	r4, [r2, #0]
 80009e6:	4628      	mov	r0, r5
 80009e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80009ec:	f000 b8dc 	b.w	8000ba8 <__malloc_unlock>
 80009f0:	42a3      	cmp	r3, r4
 80009f2:	d908      	bls.n	8000a06 <_free_r+0x42>
 80009f4:	6820      	ldr	r0, [r4, #0]
 80009f6:	1821      	adds	r1, r4, r0
 80009f8:	428b      	cmp	r3, r1
 80009fa:	bf01      	itttt	eq
 80009fc:	6819      	ldreq	r1, [r3, #0]
 80009fe:	685b      	ldreq	r3, [r3, #4]
 8000a00:	1809      	addeq	r1, r1, r0
 8000a02:	6021      	streq	r1, [r4, #0]
 8000a04:	e7ed      	b.n	80009e2 <_free_r+0x1e>
 8000a06:	461a      	mov	r2, r3
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	b10b      	cbz	r3, 8000a10 <_free_r+0x4c>
 8000a0c:	42a3      	cmp	r3, r4
 8000a0e:	d9fa      	bls.n	8000a06 <_free_r+0x42>
 8000a10:	6811      	ldr	r1, [r2, #0]
 8000a12:	1850      	adds	r0, r2, r1
 8000a14:	42a0      	cmp	r0, r4
 8000a16:	d10b      	bne.n	8000a30 <_free_r+0x6c>
 8000a18:	6820      	ldr	r0, [r4, #0]
 8000a1a:	4401      	add	r1, r0
 8000a1c:	1850      	adds	r0, r2, r1
 8000a1e:	4283      	cmp	r3, r0
 8000a20:	6011      	str	r1, [r2, #0]
 8000a22:	d1e0      	bne.n	80009e6 <_free_r+0x22>
 8000a24:	6818      	ldr	r0, [r3, #0]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	6053      	str	r3, [r2, #4]
 8000a2a:	4408      	add	r0, r1
 8000a2c:	6010      	str	r0, [r2, #0]
 8000a2e:	e7da      	b.n	80009e6 <_free_r+0x22>
 8000a30:	d902      	bls.n	8000a38 <_free_r+0x74>
 8000a32:	230c      	movs	r3, #12
 8000a34:	602b      	str	r3, [r5, #0]
 8000a36:	e7d6      	b.n	80009e6 <_free_r+0x22>
 8000a38:	6820      	ldr	r0, [r4, #0]
 8000a3a:	1821      	adds	r1, r4, r0
 8000a3c:	428b      	cmp	r3, r1
 8000a3e:	bf04      	itt	eq
 8000a40:	6819      	ldreq	r1, [r3, #0]
 8000a42:	685b      	ldreq	r3, [r3, #4]
 8000a44:	6063      	str	r3, [r4, #4]
 8000a46:	bf04      	itt	eq
 8000a48:	1809      	addeq	r1, r1, r0
 8000a4a:	6021      	streq	r1, [r4, #0]
 8000a4c:	6054      	str	r4, [r2, #4]
 8000a4e:	e7ca      	b.n	80009e6 <_free_r+0x22>
 8000a50:	bd38      	pop	{r3, r4, r5, pc}
 8000a52:	bf00      	nop
 8000a54:	200001bc 	.word	0x200001bc

08000a58 <sbrk_aligned>:
 8000a58:	b570      	push	{r4, r5, r6, lr}
 8000a5a:	4e0f      	ldr	r6, [pc, #60]	@ (8000a98 <sbrk_aligned+0x40>)
 8000a5c:	460c      	mov	r4, r1
 8000a5e:	6831      	ldr	r1, [r6, #0]
 8000a60:	4605      	mov	r5, r0
 8000a62:	b911      	cbnz	r1, 8000a6a <sbrk_aligned+0x12>
 8000a64:	f000 fba4 	bl	80011b0 <_sbrk_r>
 8000a68:	6030      	str	r0, [r6, #0]
 8000a6a:	4621      	mov	r1, r4
 8000a6c:	4628      	mov	r0, r5
 8000a6e:	f000 fb9f 	bl	80011b0 <_sbrk_r>
 8000a72:	1c43      	adds	r3, r0, #1
 8000a74:	d103      	bne.n	8000a7e <sbrk_aligned+0x26>
 8000a76:	f04f 34ff 	mov.w	r4, #4294967295
 8000a7a:	4620      	mov	r0, r4
 8000a7c:	bd70      	pop	{r4, r5, r6, pc}
 8000a7e:	1cc4      	adds	r4, r0, #3
 8000a80:	f024 0403 	bic.w	r4, r4, #3
 8000a84:	42a0      	cmp	r0, r4
 8000a86:	d0f8      	beq.n	8000a7a <sbrk_aligned+0x22>
 8000a88:	1a21      	subs	r1, r4, r0
 8000a8a:	4628      	mov	r0, r5
 8000a8c:	f000 fb90 	bl	80011b0 <_sbrk_r>
 8000a90:	3001      	adds	r0, #1
 8000a92:	d1f2      	bne.n	8000a7a <sbrk_aligned+0x22>
 8000a94:	e7ef      	b.n	8000a76 <sbrk_aligned+0x1e>
 8000a96:	bf00      	nop
 8000a98:	200001b8 	.word	0x200001b8

08000a9c <_malloc_r>:
 8000a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000aa0:	1ccd      	adds	r5, r1, #3
 8000aa2:	f025 0503 	bic.w	r5, r5, #3
 8000aa6:	3508      	adds	r5, #8
 8000aa8:	2d0c      	cmp	r5, #12
 8000aaa:	bf38      	it	cc
 8000aac:	250c      	movcc	r5, #12
 8000aae:	2d00      	cmp	r5, #0
 8000ab0:	4606      	mov	r6, r0
 8000ab2:	db01      	blt.n	8000ab8 <_malloc_r+0x1c>
 8000ab4:	42a9      	cmp	r1, r5
 8000ab6:	d904      	bls.n	8000ac2 <_malloc_r+0x26>
 8000ab8:	230c      	movs	r3, #12
 8000aba:	6033      	str	r3, [r6, #0]
 8000abc:	2000      	movs	r0, #0
 8000abe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ac2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000b98 <_malloc_r+0xfc>
 8000ac6:	f000 f869 	bl	8000b9c <__malloc_lock>
 8000aca:	f8d8 3000 	ldr.w	r3, [r8]
 8000ace:	461c      	mov	r4, r3
 8000ad0:	bb44      	cbnz	r4, 8000b24 <_malloc_r+0x88>
 8000ad2:	4629      	mov	r1, r5
 8000ad4:	4630      	mov	r0, r6
 8000ad6:	f7ff ffbf 	bl	8000a58 <sbrk_aligned>
 8000ada:	1c43      	adds	r3, r0, #1
 8000adc:	4604      	mov	r4, r0
 8000ade:	d158      	bne.n	8000b92 <_malloc_r+0xf6>
 8000ae0:	f8d8 4000 	ldr.w	r4, [r8]
 8000ae4:	4627      	mov	r7, r4
 8000ae6:	2f00      	cmp	r7, #0
 8000ae8:	d143      	bne.n	8000b72 <_malloc_r+0xd6>
 8000aea:	2c00      	cmp	r4, #0
 8000aec:	d04b      	beq.n	8000b86 <_malloc_r+0xea>
 8000aee:	6823      	ldr	r3, [r4, #0]
 8000af0:	4639      	mov	r1, r7
 8000af2:	4630      	mov	r0, r6
 8000af4:	eb04 0903 	add.w	r9, r4, r3
 8000af8:	f000 fb5a 	bl	80011b0 <_sbrk_r>
 8000afc:	4581      	cmp	r9, r0
 8000afe:	d142      	bne.n	8000b86 <_malloc_r+0xea>
 8000b00:	6821      	ldr	r1, [r4, #0]
 8000b02:	1a6d      	subs	r5, r5, r1
 8000b04:	4629      	mov	r1, r5
 8000b06:	4630      	mov	r0, r6
 8000b08:	f7ff ffa6 	bl	8000a58 <sbrk_aligned>
 8000b0c:	3001      	adds	r0, #1
 8000b0e:	d03a      	beq.n	8000b86 <_malloc_r+0xea>
 8000b10:	6823      	ldr	r3, [r4, #0]
 8000b12:	442b      	add	r3, r5
 8000b14:	6023      	str	r3, [r4, #0]
 8000b16:	f8d8 3000 	ldr.w	r3, [r8]
 8000b1a:	685a      	ldr	r2, [r3, #4]
 8000b1c:	bb62      	cbnz	r2, 8000b78 <_malloc_r+0xdc>
 8000b1e:	f8c8 7000 	str.w	r7, [r8]
 8000b22:	e00f      	b.n	8000b44 <_malloc_r+0xa8>
 8000b24:	6822      	ldr	r2, [r4, #0]
 8000b26:	1b52      	subs	r2, r2, r5
 8000b28:	d420      	bmi.n	8000b6c <_malloc_r+0xd0>
 8000b2a:	2a0b      	cmp	r2, #11
 8000b2c:	d917      	bls.n	8000b5e <_malloc_r+0xc2>
 8000b2e:	1961      	adds	r1, r4, r5
 8000b30:	42a3      	cmp	r3, r4
 8000b32:	6025      	str	r5, [r4, #0]
 8000b34:	bf18      	it	ne
 8000b36:	6059      	strne	r1, [r3, #4]
 8000b38:	6863      	ldr	r3, [r4, #4]
 8000b3a:	bf08      	it	eq
 8000b3c:	f8c8 1000 	streq.w	r1, [r8]
 8000b40:	5162      	str	r2, [r4, r5]
 8000b42:	604b      	str	r3, [r1, #4]
 8000b44:	4630      	mov	r0, r6
 8000b46:	f000 f82f 	bl	8000ba8 <__malloc_unlock>
 8000b4a:	f104 000b 	add.w	r0, r4, #11
 8000b4e:	1d23      	adds	r3, r4, #4
 8000b50:	f020 0007 	bic.w	r0, r0, #7
 8000b54:	1ac2      	subs	r2, r0, r3
 8000b56:	bf1c      	itt	ne
 8000b58:	1a1b      	subne	r3, r3, r0
 8000b5a:	50a3      	strne	r3, [r4, r2]
 8000b5c:	e7af      	b.n	8000abe <_malloc_r+0x22>
 8000b5e:	6862      	ldr	r2, [r4, #4]
 8000b60:	42a3      	cmp	r3, r4
 8000b62:	bf0c      	ite	eq
 8000b64:	f8c8 2000 	streq.w	r2, [r8]
 8000b68:	605a      	strne	r2, [r3, #4]
 8000b6a:	e7eb      	b.n	8000b44 <_malloc_r+0xa8>
 8000b6c:	4623      	mov	r3, r4
 8000b6e:	6864      	ldr	r4, [r4, #4]
 8000b70:	e7ae      	b.n	8000ad0 <_malloc_r+0x34>
 8000b72:	463c      	mov	r4, r7
 8000b74:	687f      	ldr	r7, [r7, #4]
 8000b76:	e7b6      	b.n	8000ae6 <_malloc_r+0x4a>
 8000b78:	461a      	mov	r2, r3
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	42a3      	cmp	r3, r4
 8000b7e:	d1fb      	bne.n	8000b78 <_malloc_r+0xdc>
 8000b80:	2300      	movs	r3, #0
 8000b82:	6053      	str	r3, [r2, #4]
 8000b84:	e7de      	b.n	8000b44 <_malloc_r+0xa8>
 8000b86:	230c      	movs	r3, #12
 8000b88:	6033      	str	r3, [r6, #0]
 8000b8a:	4630      	mov	r0, r6
 8000b8c:	f000 f80c 	bl	8000ba8 <__malloc_unlock>
 8000b90:	e794      	b.n	8000abc <_malloc_r+0x20>
 8000b92:	6005      	str	r5, [r0, #0]
 8000b94:	e7d6      	b.n	8000b44 <_malloc_r+0xa8>
 8000b96:	bf00      	nop
 8000b98:	200001bc 	.word	0x200001bc

08000b9c <__malloc_lock>:
 8000b9c:	4801      	ldr	r0, [pc, #4]	@ (8000ba4 <__malloc_lock+0x8>)
 8000b9e:	f7ff bf0f 	b.w	80009c0 <__retarget_lock_acquire_recursive>
 8000ba2:	bf00      	nop
 8000ba4:	200001b4 	.word	0x200001b4

08000ba8 <__malloc_unlock>:
 8000ba8:	4801      	ldr	r0, [pc, #4]	@ (8000bb0 <__malloc_unlock+0x8>)
 8000baa:	f7ff bf0a 	b.w	80009c2 <__retarget_lock_release_recursive>
 8000bae:	bf00      	nop
 8000bb0:	200001b4 	.word	0x200001b4

08000bb4 <__ssputs_r>:
 8000bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb8:	688e      	ldr	r6, [r1, #8]
 8000bba:	461f      	mov	r7, r3
 8000bbc:	42be      	cmp	r6, r7
 8000bbe:	680b      	ldr	r3, [r1, #0]
 8000bc0:	4682      	mov	sl, r0
 8000bc2:	460c      	mov	r4, r1
 8000bc4:	4690      	mov	r8, r2
 8000bc6:	d82d      	bhi.n	8000c24 <__ssputs_r+0x70>
 8000bc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000bcc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000bd0:	d026      	beq.n	8000c20 <__ssputs_r+0x6c>
 8000bd2:	6965      	ldr	r5, [r4, #20]
 8000bd4:	6909      	ldr	r1, [r1, #16]
 8000bd6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000bda:	eba3 0901 	sub.w	r9, r3, r1
 8000bde:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000be2:	1c7b      	adds	r3, r7, #1
 8000be4:	444b      	add	r3, r9
 8000be6:	106d      	asrs	r5, r5, #1
 8000be8:	429d      	cmp	r5, r3
 8000bea:	bf38      	it	cc
 8000bec:	461d      	movcc	r5, r3
 8000bee:	0553      	lsls	r3, r2, #21
 8000bf0:	d527      	bpl.n	8000c42 <__ssputs_r+0x8e>
 8000bf2:	4629      	mov	r1, r5
 8000bf4:	f7ff ff52 	bl	8000a9c <_malloc_r>
 8000bf8:	4606      	mov	r6, r0
 8000bfa:	b360      	cbz	r0, 8000c56 <__ssputs_r+0xa2>
 8000bfc:	6921      	ldr	r1, [r4, #16]
 8000bfe:	464a      	mov	r2, r9
 8000c00:	f000 fae6 	bl	80011d0 <memcpy>
 8000c04:	89a3      	ldrh	r3, [r4, #12]
 8000c06:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000c0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c0e:	81a3      	strh	r3, [r4, #12]
 8000c10:	6126      	str	r6, [r4, #16]
 8000c12:	6165      	str	r5, [r4, #20]
 8000c14:	444e      	add	r6, r9
 8000c16:	eba5 0509 	sub.w	r5, r5, r9
 8000c1a:	6026      	str	r6, [r4, #0]
 8000c1c:	60a5      	str	r5, [r4, #8]
 8000c1e:	463e      	mov	r6, r7
 8000c20:	42be      	cmp	r6, r7
 8000c22:	d900      	bls.n	8000c26 <__ssputs_r+0x72>
 8000c24:	463e      	mov	r6, r7
 8000c26:	6820      	ldr	r0, [r4, #0]
 8000c28:	4632      	mov	r2, r6
 8000c2a:	4641      	mov	r1, r8
 8000c2c:	f000 faa6 	bl	800117c <memmove>
 8000c30:	68a3      	ldr	r3, [r4, #8]
 8000c32:	1b9b      	subs	r3, r3, r6
 8000c34:	60a3      	str	r3, [r4, #8]
 8000c36:	6823      	ldr	r3, [r4, #0]
 8000c38:	4433      	add	r3, r6
 8000c3a:	6023      	str	r3, [r4, #0]
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	462a      	mov	r2, r5
 8000c44:	f000 fad2 	bl	80011ec <_realloc_r>
 8000c48:	4606      	mov	r6, r0
 8000c4a:	2800      	cmp	r0, #0
 8000c4c:	d1e0      	bne.n	8000c10 <__ssputs_r+0x5c>
 8000c4e:	6921      	ldr	r1, [r4, #16]
 8000c50:	4650      	mov	r0, sl
 8000c52:	f7ff feb7 	bl	80009c4 <_free_r>
 8000c56:	230c      	movs	r3, #12
 8000c58:	f8ca 3000 	str.w	r3, [sl]
 8000c5c:	89a3      	ldrh	r3, [r4, #12]
 8000c5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c62:	81a3      	strh	r3, [r4, #12]
 8000c64:	f04f 30ff 	mov.w	r0, #4294967295
 8000c68:	e7e9      	b.n	8000c3e <__ssputs_r+0x8a>
	...

08000c6c <_svfiprintf_r>:
 8000c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c70:	4698      	mov	r8, r3
 8000c72:	898b      	ldrh	r3, [r1, #12]
 8000c74:	061b      	lsls	r3, r3, #24
 8000c76:	b09d      	sub	sp, #116	@ 0x74
 8000c78:	4607      	mov	r7, r0
 8000c7a:	460d      	mov	r5, r1
 8000c7c:	4614      	mov	r4, r2
 8000c7e:	d510      	bpl.n	8000ca2 <_svfiprintf_r+0x36>
 8000c80:	690b      	ldr	r3, [r1, #16]
 8000c82:	b973      	cbnz	r3, 8000ca2 <_svfiprintf_r+0x36>
 8000c84:	2140      	movs	r1, #64	@ 0x40
 8000c86:	f7ff ff09 	bl	8000a9c <_malloc_r>
 8000c8a:	6028      	str	r0, [r5, #0]
 8000c8c:	6128      	str	r0, [r5, #16]
 8000c8e:	b930      	cbnz	r0, 8000c9e <_svfiprintf_r+0x32>
 8000c90:	230c      	movs	r3, #12
 8000c92:	603b      	str	r3, [r7, #0]
 8000c94:	f04f 30ff 	mov.w	r0, #4294967295
 8000c98:	b01d      	add	sp, #116	@ 0x74
 8000c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c9e:	2340      	movs	r3, #64	@ 0x40
 8000ca0:	616b      	str	r3, [r5, #20]
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	9309      	str	r3, [sp, #36]	@ 0x24
 8000ca6:	2320      	movs	r3, #32
 8000ca8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000cac:	f8cd 800c 	str.w	r8, [sp, #12]
 8000cb0:	2330      	movs	r3, #48	@ 0x30
 8000cb2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000e50 <_svfiprintf_r+0x1e4>
 8000cb6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000cba:	f04f 0901 	mov.w	r9, #1
 8000cbe:	4623      	mov	r3, r4
 8000cc0:	469a      	mov	sl, r3
 8000cc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000cc6:	b10a      	cbz	r2, 8000ccc <_svfiprintf_r+0x60>
 8000cc8:	2a25      	cmp	r2, #37	@ 0x25
 8000cca:	d1f9      	bne.n	8000cc0 <_svfiprintf_r+0x54>
 8000ccc:	ebba 0b04 	subs.w	fp, sl, r4
 8000cd0:	d00b      	beq.n	8000cea <_svfiprintf_r+0x7e>
 8000cd2:	465b      	mov	r3, fp
 8000cd4:	4622      	mov	r2, r4
 8000cd6:	4629      	mov	r1, r5
 8000cd8:	4638      	mov	r0, r7
 8000cda:	f7ff ff6b 	bl	8000bb4 <__ssputs_r>
 8000cde:	3001      	adds	r0, #1
 8000ce0:	f000 80a7 	beq.w	8000e32 <_svfiprintf_r+0x1c6>
 8000ce4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000ce6:	445a      	add	r2, fp
 8000ce8:	9209      	str	r2, [sp, #36]	@ 0x24
 8000cea:	f89a 3000 	ldrb.w	r3, [sl]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	f000 809f 	beq.w	8000e32 <_svfiprintf_r+0x1c6>
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8000cfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000cfe:	f10a 0a01 	add.w	sl, sl, #1
 8000d02:	9304      	str	r3, [sp, #16]
 8000d04:	9307      	str	r3, [sp, #28]
 8000d06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000d0a:	931a      	str	r3, [sp, #104]	@ 0x68
 8000d0c:	4654      	mov	r4, sl
 8000d0e:	2205      	movs	r2, #5
 8000d10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d14:	484e      	ldr	r0, [pc, #312]	@ (8000e50 <_svfiprintf_r+0x1e4>)
 8000d16:	f7ff fa63 	bl	80001e0 <memchr>
 8000d1a:	9a04      	ldr	r2, [sp, #16]
 8000d1c:	b9d8      	cbnz	r0, 8000d56 <_svfiprintf_r+0xea>
 8000d1e:	06d0      	lsls	r0, r2, #27
 8000d20:	bf44      	itt	mi
 8000d22:	2320      	movmi	r3, #32
 8000d24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000d28:	0711      	lsls	r1, r2, #28
 8000d2a:	bf44      	itt	mi
 8000d2c:	232b      	movmi	r3, #43	@ 0x2b
 8000d2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000d32:	f89a 3000 	ldrb.w	r3, [sl]
 8000d36:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d38:	d015      	beq.n	8000d66 <_svfiprintf_r+0xfa>
 8000d3a:	9a07      	ldr	r2, [sp, #28]
 8000d3c:	4654      	mov	r4, sl
 8000d3e:	2000      	movs	r0, #0
 8000d40:	f04f 0c0a 	mov.w	ip, #10
 8000d44:	4621      	mov	r1, r4
 8000d46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000d4a:	3b30      	subs	r3, #48	@ 0x30
 8000d4c:	2b09      	cmp	r3, #9
 8000d4e:	d94b      	bls.n	8000de8 <_svfiprintf_r+0x17c>
 8000d50:	b1b0      	cbz	r0, 8000d80 <_svfiprintf_r+0x114>
 8000d52:	9207      	str	r2, [sp, #28]
 8000d54:	e014      	b.n	8000d80 <_svfiprintf_r+0x114>
 8000d56:	eba0 0308 	sub.w	r3, r0, r8
 8000d5a:	fa09 f303 	lsl.w	r3, r9, r3
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	9304      	str	r3, [sp, #16]
 8000d62:	46a2      	mov	sl, r4
 8000d64:	e7d2      	b.n	8000d0c <_svfiprintf_r+0xa0>
 8000d66:	9b03      	ldr	r3, [sp, #12]
 8000d68:	1d19      	adds	r1, r3, #4
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	9103      	str	r1, [sp, #12]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	bfbb      	ittet	lt
 8000d72:	425b      	neglt	r3, r3
 8000d74:	f042 0202 	orrlt.w	r2, r2, #2
 8000d78:	9307      	strge	r3, [sp, #28]
 8000d7a:	9307      	strlt	r3, [sp, #28]
 8000d7c:	bfb8      	it	lt
 8000d7e:	9204      	strlt	r2, [sp, #16]
 8000d80:	7823      	ldrb	r3, [r4, #0]
 8000d82:	2b2e      	cmp	r3, #46	@ 0x2e
 8000d84:	d10a      	bne.n	8000d9c <_svfiprintf_r+0x130>
 8000d86:	7863      	ldrb	r3, [r4, #1]
 8000d88:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d8a:	d132      	bne.n	8000df2 <_svfiprintf_r+0x186>
 8000d8c:	9b03      	ldr	r3, [sp, #12]
 8000d8e:	1d1a      	adds	r2, r3, #4
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	9203      	str	r2, [sp, #12]
 8000d94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000d98:	3402      	adds	r4, #2
 8000d9a:	9305      	str	r3, [sp, #20]
 8000d9c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8000e60 <_svfiprintf_r+0x1f4>
 8000da0:	7821      	ldrb	r1, [r4, #0]
 8000da2:	2203      	movs	r2, #3
 8000da4:	4650      	mov	r0, sl
 8000da6:	f7ff fa1b 	bl	80001e0 <memchr>
 8000daa:	b138      	cbz	r0, 8000dbc <_svfiprintf_r+0x150>
 8000dac:	9b04      	ldr	r3, [sp, #16]
 8000dae:	eba0 000a 	sub.w	r0, r0, sl
 8000db2:	2240      	movs	r2, #64	@ 0x40
 8000db4:	4082      	lsls	r2, r0
 8000db6:	4313      	orrs	r3, r2
 8000db8:	3401      	adds	r4, #1
 8000dba:	9304      	str	r3, [sp, #16]
 8000dbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000dc0:	4824      	ldr	r0, [pc, #144]	@ (8000e54 <_svfiprintf_r+0x1e8>)
 8000dc2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000dc6:	2206      	movs	r2, #6
 8000dc8:	f7ff fa0a 	bl	80001e0 <memchr>
 8000dcc:	2800      	cmp	r0, #0
 8000dce:	d036      	beq.n	8000e3e <_svfiprintf_r+0x1d2>
 8000dd0:	4b21      	ldr	r3, [pc, #132]	@ (8000e58 <_svfiprintf_r+0x1ec>)
 8000dd2:	bb1b      	cbnz	r3, 8000e1c <_svfiprintf_r+0x1b0>
 8000dd4:	9b03      	ldr	r3, [sp, #12]
 8000dd6:	3307      	adds	r3, #7
 8000dd8:	f023 0307 	bic.w	r3, r3, #7
 8000ddc:	3308      	adds	r3, #8
 8000dde:	9303      	str	r3, [sp, #12]
 8000de0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000de2:	4433      	add	r3, r6
 8000de4:	9309      	str	r3, [sp, #36]	@ 0x24
 8000de6:	e76a      	b.n	8000cbe <_svfiprintf_r+0x52>
 8000de8:	fb0c 3202 	mla	r2, ip, r2, r3
 8000dec:	460c      	mov	r4, r1
 8000dee:	2001      	movs	r0, #1
 8000df0:	e7a8      	b.n	8000d44 <_svfiprintf_r+0xd8>
 8000df2:	2300      	movs	r3, #0
 8000df4:	3401      	adds	r4, #1
 8000df6:	9305      	str	r3, [sp, #20]
 8000df8:	4619      	mov	r1, r3
 8000dfa:	f04f 0c0a 	mov.w	ip, #10
 8000dfe:	4620      	mov	r0, r4
 8000e00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e04:	3a30      	subs	r2, #48	@ 0x30
 8000e06:	2a09      	cmp	r2, #9
 8000e08:	d903      	bls.n	8000e12 <_svfiprintf_r+0x1a6>
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d0c6      	beq.n	8000d9c <_svfiprintf_r+0x130>
 8000e0e:	9105      	str	r1, [sp, #20]
 8000e10:	e7c4      	b.n	8000d9c <_svfiprintf_r+0x130>
 8000e12:	fb0c 2101 	mla	r1, ip, r1, r2
 8000e16:	4604      	mov	r4, r0
 8000e18:	2301      	movs	r3, #1
 8000e1a:	e7f0      	b.n	8000dfe <_svfiprintf_r+0x192>
 8000e1c:	ab03      	add	r3, sp, #12
 8000e1e:	9300      	str	r3, [sp, #0]
 8000e20:	462a      	mov	r2, r5
 8000e22:	4b0e      	ldr	r3, [pc, #56]	@ (8000e5c <_svfiprintf_r+0x1f0>)
 8000e24:	a904      	add	r1, sp, #16
 8000e26:	4638      	mov	r0, r7
 8000e28:	f3af 8000 	nop.w
 8000e2c:	1c42      	adds	r2, r0, #1
 8000e2e:	4606      	mov	r6, r0
 8000e30:	d1d6      	bne.n	8000de0 <_svfiprintf_r+0x174>
 8000e32:	89ab      	ldrh	r3, [r5, #12]
 8000e34:	065b      	lsls	r3, r3, #25
 8000e36:	f53f af2d 	bmi.w	8000c94 <_svfiprintf_r+0x28>
 8000e3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000e3c:	e72c      	b.n	8000c98 <_svfiprintf_r+0x2c>
 8000e3e:	ab03      	add	r3, sp, #12
 8000e40:	9300      	str	r3, [sp, #0]
 8000e42:	462a      	mov	r2, r5
 8000e44:	4b05      	ldr	r3, [pc, #20]	@ (8000e5c <_svfiprintf_r+0x1f0>)
 8000e46:	a904      	add	r1, sp, #16
 8000e48:	4638      	mov	r0, r7
 8000e4a:	f000 f879 	bl	8000f40 <_printf_i>
 8000e4e:	e7ed      	b.n	8000e2c <_svfiprintf_r+0x1c0>
 8000e50:	0800129c 	.word	0x0800129c
 8000e54:	080012a6 	.word	0x080012a6
 8000e58:	00000000 	.word	0x00000000
 8000e5c:	08000bb5 	.word	0x08000bb5
 8000e60:	080012a2 	.word	0x080012a2

08000e64 <_printf_common>:
 8000e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e68:	4616      	mov	r6, r2
 8000e6a:	4698      	mov	r8, r3
 8000e6c:	688a      	ldr	r2, [r1, #8]
 8000e6e:	690b      	ldr	r3, [r1, #16]
 8000e70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000e74:	4293      	cmp	r3, r2
 8000e76:	bfb8      	it	lt
 8000e78:	4613      	movlt	r3, r2
 8000e7a:	6033      	str	r3, [r6, #0]
 8000e7c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000e80:	4607      	mov	r7, r0
 8000e82:	460c      	mov	r4, r1
 8000e84:	b10a      	cbz	r2, 8000e8a <_printf_common+0x26>
 8000e86:	3301      	adds	r3, #1
 8000e88:	6033      	str	r3, [r6, #0]
 8000e8a:	6823      	ldr	r3, [r4, #0]
 8000e8c:	0699      	lsls	r1, r3, #26
 8000e8e:	bf42      	ittt	mi
 8000e90:	6833      	ldrmi	r3, [r6, #0]
 8000e92:	3302      	addmi	r3, #2
 8000e94:	6033      	strmi	r3, [r6, #0]
 8000e96:	6825      	ldr	r5, [r4, #0]
 8000e98:	f015 0506 	ands.w	r5, r5, #6
 8000e9c:	d106      	bne.n	8000eac <_printf_common+0x48>
 8000e9e:	f104 0a19 	add.w	sl, r4, #25
 8000ea2:	68e3      	ldr	r3, [r4, #12]
 8000ea4:	6832      	ldr	r2, [r6, #0]
 8000ea6:	1a9b      	subs	r3, r3, r2
 8000ea8:	42ab      	cmp	r3, r5
 8000eaa:	dc26      	bgt.n	8000efa <_printf_common+0x96>
 8000eac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000eb0:	6822      	ldr	r2, [r4, #0]
 8000eb2:	3b00      	subs	r3, #0
 8000eb4:	bf18      	it	ne
 8000eb6:	2301      	movne	r3, #1
 8000eb8:	0692      	lsls	r2, r2, #26
 8000eba:	d42b      	bmi.n	8000f14 <_printf_common+0xb0>
 8000ebc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000ec0:	4641      	mov	r1, r8
 8000ec2:	4638      	mov	r0, r7
 8000ec4:	47c8      	blx	r9
 8000ec6:	3001      	adds	r0, #1
 8000ec8:	d01e      	beq.n	8000f08 <_printf_common+0xa4>
 8000eca:	6823      	ldr	r3, [r4, #0]
 8000ecc:	6922      	ldr	r2, [r4, #16]
 8000ece:	f003 0306 	and.w	r3, r3, #6
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	bf02      	ittt	eq
 8000ed6:	68e5      	ldreq	r5, [r4, #12]
 8000ed8:	6833      	ldreq	r3, [r6, #0]
 8000eda:	1aed      	subeq	r5, r5, r3
 8000edc:	68a3      	ldr	r3, [r4, #8]
 8000ede:	bf0c      	ite	eq
 8000ee0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000ee4:	2500      	movne	r5, #0
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	bfc4      	itt	gt
 8000eea:	1a9b      	subgt	r3, r3, r2
 8000eec:	18ed      	addgt	r5, r5, r3
 8000eee:	2600      	movs	r6, #0
 8000ef0:	341a      	adds	r4, #26
 8000ef2:	42b5      	cmp	r5, r6
 8000ef4:	d11a      	bne.n	8000f2c <_printf_common+0xc8>
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	e008      	b.n	8000f0c <_printf_common+0xa8>
 8000efa:	2301      	movs	r3, #1
 8000efc:	4652      	mov	r2, sl
 8000efe:	4641      	mov	r1, r8
 8000f00:	4638      	mov	r0, r7
 8000f02:	47c8      	blx	r9
 8000f04:	3001      	adds	r0, #1
 8000f06:	d103      	bne.n	8000f10 <_printf_common+0xac>
 8000f08:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f10:	3501      	adds	r5, #1
 8000f12:	e7c6      	b.n	8000ea2 <_printf_common+0x3e>
 8000f14:	18e1      	adds	r1, r4, r3
 8000f16:	1c5a      	adds	r2, r3, #1
 8000f18:	2030      	movs	r0, #48	@ 0x30
 8000f1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000f1e:	4422      	add	r2, r4
 8000f20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000f24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000f28:	3302      	adds	r3, #2
 8000f2a:	e7c7      	b.n	8000ebc <_printf_common+0x58>
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	4622      	mov	r2, r4
 8000f30:	4641      	mov	r1, r8
 8000f32:	4638      	mov	r0, r7
 8000f34:	47c8      	blx	r9
 8000f36:	3001      	adds	r0, #1
 8000f38:	d0e6      	beq.n	8000f08 <_printf_common+0xa4>
 8000f3a:	3601      	adds	r6, #1
 8000f3c:	e7d9      	b.n	8000ef2 <_printf_common+0x8e>
	...

08000f40 <_printf_i>:
 8000f40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000f44:	7e0f      	ldrb	r7, [r1, #24]
 8000f46:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000f48:	2f78      	cmp	r7, #120	@ 0x78
 8000f4a:	4691      	mov	r9, r2
 8000f4c:	4680      	mov	r8, r0
 8000f4e:	460c      	mov	r4, r1
 8000f50:	469a      	mov	sl, r3
 8000f52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000f56:	d807      	bhi.n	8000f68 <_printf_i+0x28>
 8000f58:	2f62      	cmp	r7, #98	@ 0x62
 8000f5a:	d80a      	bhi.n	8000f72 <_printf_i+0x32>
 8000f5c:	2f00      	cmp	r7, #0
 8000f5e:	f000 80d1 	beq.w	8001104 <_printf_i+0x1c4>
 8000f62:	2f58      	cmp	r7, #88	@ 0x58
 8000f64:	f000 80b8 	beq.w	80010d8 <_printf_i+0x198>
 8000f68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000f6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000f70:	e03a      	b.n	8000fe8 <_printf_i+0xa8>
 8000f72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000f76:	2b15      	cmp	r3, #21
 8000f78:	d8f6      	bhi.n	8000f68 <_printf_i+0x28>
 8000f7a:	a101      	add	r1, pc, #4	@ (adr r1, 8000f80 <_printf_i+0x40>)
 8000f7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000f80:	08000fd9 	.word	0x08000fd9
 8000f84:	08000fed 	.word	0x08000fed
 8000f88:	08000f69 	.word	0x08000f69
 8000f8c:	08000f69 	.word	0x08000f69
 8000f90:	08000f69 	.word	0x08000f69
 8000f94:	08000f69 	.word	0x08000f69
 8000f98:	08000fed 	.word	0x08000fed
 8000f9c:	08000f69 	.word	0x08000f69
 8000fa0:	08000f69 	.word	0x08000f69
 8000fa4:	08000f69 	.word	0x08000f69
 8000fa8:	08000f69 	.word	0x08000f69
 8000fac:	080010eb 	.word	0x080010eb
 8000fb0:	08001017 	.word	0x08001017
 8000fb4:	080010a5 	.word	0x080010a5
 8000fb8:	08000f69 	.word	0x08000f69
 8000fbc:	08000f69 	.word	0x08000f69
 8000fc0:	0800110d 	.word	0x0800110d
 8000fc4:	08000f69 	.word	0x08000f69
 8000fc8:	08001017 	.word	0x08001017
 8000fcc:	08000f69 	.word	0x08000f69
 8000fd0:	08000f69 	.word	0x08000f69
 8000fd4:	080010ad 	.word	0x080010ad
 8000fd8:	6833      	ldr	r3, [r6, #0]
 8000fda:	1d1a      	adds	r2, r3, #4
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	6032      	str	r2, [r6, #0]
 8000fe0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000fe4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e09c      	b.n	8001126 <_printf_i+0x1e6>
 8000fec:	6833      	ldr	r3, [r6, #0]
 8000fee:	6820      	ldr	r0, [r4, #0]
 8000ff0:	1d19      	adds	r1, r3, #4
 8000ff2:	6031      	str	r1, [r6, #0]
 8000ff4:	0606      	lsls	r6, r0, #24
 8000ff6:	d501      	bpl.n	8000ffc <_printf_i+0xbc>
 8000ff8:	681d      	ldr	r5, [r3, #0]
 8000ffa:	e003      	b.n	8001004 <_printf_i+0xc4>
 8000ffc:	0645      	lsls	r5, r0, #25
 8000ffe:	d5fb      	bpl.n	8000ff8 <_printf_i+0xb8>
 8001000:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001004:	2d00      	cmp	r5, #0
 8001006:	da03      	bge.n	8001010 <_printf_i+0xd0>
 8001008:	232d      	movs	r3, #45	@ 0x2d
 800100a:	426d      	negs	r5, r5
 800100c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001010:	4858      	ldr	r0, [pc, #352]	@ (8001174 <_printf_i+0x234>)
 8001012:	230a      	movs	r3, #10
 8001014:	e011      	b.n	800103a <_printf_i+0xfa>
 8001016:	6821      	ldr	r1, [r4, #0]
 8001018:	6833      	ldr	r3, [r6, #0]
 800101a:	0608      	lsls	r0, r1, #24
 800101c:	f853 5b04 	ldr.w	r5, [r3], #4
 8001020:	d402      	bmi.n	8001028 <_printf_i+0xe8>
 8001022:	0649      	lsls	r1, r1, #25
 8001024:	bf48      	it	mi
 8001026:	b2ad      	uxthmi	r5, r5
 8001028:	2f6f      	cmp	r7, #111	@ 0x6f
 800102a:	4852      	ldr	r0, [pc, #328]	@ (8001174 <_printf_i+0x234>)
 800102c:	6033      	str	r3, [r6, #0]
 800102e:	bf14      	ite	ne
 8001030:	230a      	movne	r3, #10
 8001032:	2308      	moveq	r3, #8
 8001034:	2100      	movs	r1, #0
 8001036:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800103a:	6866      	ldr	r6, [r4, #4]
 800103c:	60a6      	str	r6, [r4, #8]
 800103e:	2e00      	cmp	r6, #0
 8001040:	db05      	blt.n	800104e <_printf_i+0x10e>
 8001042:	6821      	ldr	r1, [r4, #0]
 8001044:	432e      	orrs	r6, r5
 8001046:	f021 0104 	bic.w	r1, r1, #4
 800104a:	6021      	str	r1, [r4, #0]
 800104c:	d04b      	beq.n	80010e6 <_printf_i+0x1a6>
 800104e:	4616      	mov	r6, r2
 8001050:	fbb5 f1f3 	udiv	r1, r5, r3
 8001054:	fb03 5711 	mls	r7, r3, r1, r5
 8001058:	5dc7      	ldrb	r7, [r0, r7]
 800105a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800105e:	462f      	mov	r7, r5
 8001060:	42bb      	cmp	r3, r7
 8001062:	460d      	mov	r5, r1
 8001064:	d9f4      	bls.n	8001050 <_printf_i+0x110>
 8001066:	2b08      	cmp	r3, #8
 8001068:	d10b      	bne.n	8001082 <_printf_i+0x142>
 800106a:	6823      	ldr	r3, [r4, #0]
 800106c:	07df      	lsls	r7, r3, #31
 800106e:	d508      	bpl.n	8001082 <_printf_i+0x142>
 8001070:	6923      	ldr	r3, [r4, #16]
 8001072:	6861      	ldr	r1, [r4, #4]
 8001074:	4299      	cmp	r1, r3
 8001076:	bfde      	ittt	le
 8001078:	2330      	movle	r3, #48	@ 0x30
 800107a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800107e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001082:	1b92      	subs	r2, r2, r6
 8001084:	6122      	str	r2, [r4, #16]
 8001086:	f8cd a000 	str.w	sl, [sp]
 800108a:	464b      	mov	r3, r9
 800108c:	aa03      	add	r2, sp, #12
 800108e:	4621      	mov	r1, r4
 8001090:	4640      	mov	r0, r8
 8001092:	f7ff fee7 	bl	8000e64 <_printf_common>
 8001096:	3001      	adds	r0, #1
 8001098:	d14a      	bne.n	8001130 <_printf_i+0x1f0>
 800109a:	f04f 30ff 	mov.w	r0, #4294967295
 800109e:	b004      	add	sp, #16
 80010a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010a4:	6823      	ldr	r3, [r4, #0]
 80010a6:	f043 0320 	orr.w	r3, r3, #32
 80010aa:	6023      	str	r3, [r4, #0]
 80010ac:	4832      	ldr	r0, [pc, #200]	@ (8001178 <_printf_i+0x238>)
 80010ae:	2778      	movs	r7, #120	@ 0x78
 80010b0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80010b4:	6823      	ldr	r3, [r4, #0]
 80010b6:	6831      	ldr	r1, [r6, #0]
 80010b8:	061f      	lsls	r7, r3, #24
 80010ba:	f851 5b04 	ldr.w	r5, [r1], #4
 80010be:	d402      	bmi.n	80010c6 <_printf_i+0x186>
 80010c0:	065f      	lsls	r7, r3, #25
 80010c2:	bf48      	it	mi
 80010c4:	b2ad      	uxthmi	r5, r5
 80010c6:	6031      	str	r1, [r6, #0]
 80010c8:	07d9      	lsls	r1, r3, #31
 80010ca:	bf44      	itt	mi
 80010cc:	f043 0320 	orrmi.w	r3, r3, #32
 80010d0:	6023      	strmi	r3, [r4, #0]
 80010d2:	b11d      	cbz	r5, 80010dc <_printf_i+0x19c>
 80010d4:	2310      	movs	r3, #16
 80010d6:	e7ad      	b.n	8001034 <_printf_i+0xf4>
 80010d8:	4826      	ldr	r0, [pc, #152]	@ (8001174 <_printf_i+0x234>)
 80010da:	e7e9      	b.n	80010b0 <_printf_i+0x170>
 80010dc:	6823      	ldr	r3, [r4, #0]
 80010de:	f023 0320 	bic.w	r3, r3, #32
 80010e2:	6023      	str	r3, [r4, #0]
 80010e4:	e7f6      	b.n	80010d4 <_printf_i+0x194>
 80010e6:	4616      	mov	r6, r2
 80010e8:	e7bd      	b.n	8001066 <_printf_i+0x126>
 80010ea:	6833      	ldr	r3, [r6, #0]
 80010ec:	6825      	ldr	r5, [r4, #0]
 80010ee:	6961      	ldr	r1, [r4, #20]
 80010f0:	1d18      	adds	r0, r3, #4
 80010f2:	6030      	str	r0, [r6, #0]
 80010f4:	062e      	lsls	r6, r5, #24
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	d501      	bpl.n	80010fe <_printf_i+0x1be>
 80010fa:	6019      	str	r1, [r3, #0]
 80010fc:	e002      	b.n	8001104 <_printf_i+0x1c4>
 80010fe:	0668      	lsls	r0, r5, #25
 8001100:	d5fb      	bpl.n	80010fa <_printf_i+0x1ba>
 8001102:	8019      	strh	r1, [r3, #0]
 8001104:	2300      	movs	r3, #0
 8001106:	6123      	str	r3, [r4, #16]
 8001108:	4616      	mov	r6, r2
 800110a:	e7bc      	b.n	8001086 <_printf_i+0x146>
 800110c:	6833      	ldr	r3, [r6, #0]
 800110e:	1d1a      	adds	r2, r3, #4
 8001110:	6032      	str	r2, [r6, #0]
 8001112:	681e      	ldr	r6, [r3, #0]
 8001114:	6862      	ldr	r2, [r4, #4]
 8001116:	2100      	movs	r1, #0
 8001118:	4630      	mov	r0, r6
 800111a:	f7ff f861 	bl	80001e0 <memchr>
 800111e:	b108      	cbz	r0, 8001124 <_printf_i+0x1e4>
 8001120:	1b80      	subs	r0, r0, r6
 8001122:	6060      	str	r0, [r4, #4]
 8001124:	6863      	ldr	r3, [r4, #4]
 8001126:	6123      	str	r3, [r4, #16]
 8001128:	2300      	movs	r3, #0
 800112a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800112e:	e7aa      	b.n	8001086 <_printf_i+0x146>
 8001130:	6923      	ldr	r3, [r4, #16]
 8001132:	4632      	mov	r2, r6
 8001134:	4649      	mov	r1, r9
 8001136:	4640      	mov	r0, r8
 8001138:	47d0      	blx	sl
 800113a:	3001      	adds	r0, #1
 800113c:	d0ad      	beq.n	800109a <_printf_i+0x15a>
 800113e:	6823      	ldr	r3, [r4, #0]
 8001140:	079b      	lsls	r3, r3, #30
 8001142:	d413      	bmi.n	800116c <_printf_i+0x22c>
 8001144:	68e0      	ldr	r0, [r4, #12]
 8001146:	9b03      	ldr	r3, [sp, #12]
 8001148:	4298      	cmp	r0, r3
 800114a:	bfb8      	it	lt
 800114c:	4618      	movlt	r0, r3
 800114e:	e7a6      	b.n	800109e <_printf_i+0x15e>
 8001150:	2301      	movs	r3, #1
 8001152:	4632      	mov	r2, r6
 8001154:	4649      	mov	r1, r9
 8001156:	4640      	mov	r0, r8
 8001158:	47d0      	blx	sl
 800115a:	3001      	adds	r0, #1
 800115c:	d09d      	beq.n	800109a <_printf_i+0x15a>
 800115e:	3501      	adds	r5, #1
 8001160:	68e3      	ldr	r3, [r4, #12]
 8001162:	9903      	ldr	r1, [sp, #12]
 8001164:	1a5b      	subs	r3, r3, r1
 8001166:	42ab      	cmp	r3, r5
 8001168:	dcf2      	bgt.n	8001150 <_printf_i+0x210>
 800116a:	e7eb      	b.n	8001144 <_printf_i+0x204>
 800116c:	2500      	movs	r5, #0
 800116e:	f104 0619 	add.w	r6, r4, #25
 8001172:	e7f5      	b.n	8001160 <_printf_i+0x220>
 8001174:	080012ad 	.word	0x080012ad
 8001178:	080012be 	.word	0x080012be

0800117c <memmove>:
 800117c:	4288      	cmp	r0, r1
 800117e:	b510      	push	{r4, lr}
 8001180:	eb01 0402 	add.w	r4, r1, r2
 8001184:	d902      	bls.n	800118c <memmove+0x10>
 8001186:	4284      	cmp	r4, r0
 8001188:	4623      	mov	r3, r4
 800118a:	d807      	bhi.n	800119c <memmove+0x20>
 800118c:	1e43      	subs	r3, r0, #1
 800118e:	42a1      	cmp	r1, r4
 8001190:	d008      	beq.n	80011a4 <memmove+0x28>
 8001192:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001196:	f803 2f01 	strb.w	r2, [r3, #1]!
 800119a:	e7f8      	b.n	800118e <memmove+0x12>
 800119c:	4402      	add	r2, r0
 800119e:	4601      	mov	r1, r0
 80011a0:	428a      	cmp	r2, r1
 80011a2:	d100      	bne.n	80011a6 <memmove+0x2a>
 80011a4:	bd10      	pop	{r4, pc}
 80011a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80011aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80011ae:	e7f7      	b.n	80011a0 <memmove+0x24>

080011b0 <_sbrk_r>:
 80011b0:	b538      	push	{r3, r4, r5, lr}
 80011b2:	4d06      	ldr	r5, [pc, #24]	@ (80011cc <_sbrk_r+0x1c>)
 80011b4:	2300      	movs	r3, #0
 80011b6:	4604      	mov	r4, r0
 80011b8:	4608      	mov	r0, r1
 80011ba:	602b      	str	r3, [r5, #0]
 80011bc:	f7ff fb2e 	bl	800081c <_sbrk>
 80011c0:	1c43      	adds	r3, r0, #1
 80011c2:	d102      	bne.n	80011ca <_sbrk_r+0x1a>
 80011c4:	682b      	ldr	r3, [r5, #0]
 80011c6:	b103      	cbz	r3, 80011ca <_sbrk_r+0x1a>
 80011c8:	6023      	str	r3, [r4, #0]
 80011ca:	bd38      	pop	{r3, r4, r5, pc}
 80011cc:	200001b0 	.word	0x200001b0

080011d0 <memcpy>:
 80011d0:	440a      	add	r2, r1
 80011d2:	4291      	cmp	r1, r2
 80011d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80011d8:	d100      	bne.n	80011dc <memcpy+0xc>
 80011da:	4770      	bx	lr
 80011dc:	b510      	push	{r4, lr}
 80011de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80011e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80011e6:	4291      	cmp	r1, r2
 80011e8:	d1f9      	bne.n	80011de <memcpy+0xe>
 80011ea:	bd10      	pop	{r4, pc}

080011ec <_realloc_r>:
 80011ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011f0:	4607      	mov	r7, r0
 80011f2:	4614      	mov	r4, r2
 80011f4:	460d      	mov	r5, r1
 80011f6:	b921      	cbnz	r1, 8001202 <_realloc_r+0x16>
 80011f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80011fc:	4611      	mov	r1, r2
 80011fe:	f7ff bc4d 	b.w	8000a9c <_malloc_r>
 8001202:	b92a      	cbnz	r2, 8001210 <_realloc_r+0x24>
 8001204:	f7ff fbde 	bl	80009c4 <_free_r>
 8001208:	4625      	mov	r5, r4
 800120a:	4628      	mov	r0, r5
 800120c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001210:	f000 f81a 	bl	8001248 <_malloc_usable_size_r>
 8001214:	4284      	cmp	r4, r0
 8001216:	4606      	mov	r6, r0
 8001218:	d802      	bhi.n	8001220 <_realloc_r+0x34>
 800121a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800121e:	d8f4      	bhi.n	800120a <_realloc_r+0x1e>
 8001220:	4621      	mov	r1, r4
 8001222:	4638      	mov	r0, r7
 8001224:	f7ff fc3a 	bl	8000a9c <_malloc_r>
 8001228:	4680      	mov	r8, r0
 800122a:	b908      	cbnz	r0, 8001230 <_realloc_r+0x44>
 800122c:	4645      	mov	r5, r8
 800122e:	e7ec      	b.n	800120a <_realloc_r+0x1e>
 8001230:	42b4      	cmp	r4, r6
 8001232:	4622      	mov	r2, r4
 8001234:	4629      	mov	r1, r5
 8001236:	bf28      	it	cs
 8001238:	4632      	movcs	r2, r6
 800123a:	f7ff ffc9 	bl	80011d0 <memcpy>
 800123e:	4629      	mov	r1, r5
 8001240:	4638      	mov	r0, r7
 8001242:	f7ff fbbf 	bl	80009c4 <_free_r>
 8001246:	e7f1      	b.n	800122c <_realloc_r+0x40>

08001248 <_malloc_usable_size_r>:
 8001248:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800124c:	1f18      	subs	r0, r3, #4
 800124e:	2b00      	cmp	r3, #0
 8001250:	bfbc      	itt	lt
 8001252:	580b      	ldrlt	r3, [r1, r0]
 8001254:	18c0      	addlt	r0, r0, r3
 8001256:	4770      	bx	lr

08001258 <_init>:
 8001258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800125a:	bf00      	nop
 800125c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800125e:	bc08      	pop	{r3}
 8001260:	469e      	mov	lr, r3
 8001262:	4770      	bx	lr

08001264 <_fini>:
 8001264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001266:	bf00      	nop
 8001268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800126a:	bc08      	pop	{r3}
 800126c:	469e      	mov	lr, r3
 800126e:	4770      	bx	lr
